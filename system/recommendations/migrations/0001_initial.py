# Generated by Django 5.2.1 on 2025-05-17 06:23

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tracks', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TrackSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField(verbose_name='Показатель сходства')),
                ('similarity_type', models.CharField(choices=[('collaborative', 'Коллаборативное'), ('content_based', 'Контентное'), ('hybrid', 'Гибридное')], default='collaborative', max_length=20, verbose_name='Тип сходства')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('track_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_a', to='tracks.track', verbose_name='Трек A')),
                ('track_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_b', to='tracks.track', verbose_name='Трек B')),
            ],
            options={
                'verbose_name': 'Сходство треков',
                'verbose_name_plural': 'Сходства треков',
                'indexes': [models.Index(fields=['track_a', 'similarity_score'], name='recommendat_track_a_aade50_idx'), models.Index(fields=['track_b', 'similarity_score'], name='recommendat_track_b_b02de0_idx')],
                'unique_together': {('track_a', 'track_b', 'similarity_type')},
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(default=1.0, verbose_name='Вес предпочтения')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_preferences', to='tracks.genre', verbose_name='Жанр')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Предпочтение пользователя',
                'verbose_name_plural': 'Предпочтения пользователей',
                'unique_together': {('user', 'genre')},
            },
        ),
        migrations.CreateModel(
            name='UserSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField(verbose_name='Показатель сходства')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_a', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь A')),
                ('user_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_b', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь B')),
            ],
            options={
                'verbose_name': 'Сходство пользователей',
                'verbose_name_plural': 'Сходства пользователей',
                'indexes': [models.Index(fields=['user_a', 'similarity_score'], name='recommendat_user_a__d78cbb_idx'), models.Index(fields=['user_b', 'similarity_score'], name='recommendat_user_b__395eda_idx')],
                'unique_together': {('user_a', 'user_b')},
            },
        ),
        migrations.CreateModel(
            name='UserTrackRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(verbose_name='Оценка рекомендации')),
                ('recommendation_type', models.CharField(choices=[('collaborative', 'Коллаборативная'), ('content_based', 'Контентная'), ('popularity', 'По популярности'), ('hybrid', 'Гибридная')], default='hybrid', max_length=20, verbose_name='Тип рекомендации')),
                ('is_shown', models.BooleanField(default=False, verbose_name='Был показан')),
                ('is_interacted', models.BooleanField(default=False, verbose_name='Было взаимодействие')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended_to_users', to='tracks.track', verbose_name='Трек')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='track_recommendations', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Рекомендация трека',
                'verbose_name_plural': 'Рекомендации треков',
                'indexes': [models.Index(fields=['user', 'score'], name='recommendat_user_id_1fd357_idx'), models.Index(fields=['user', 'is_shown', 'score'], name='recommendat_user_id_699e77_idx')],
                'unique_together': {('user', 'track', 'recommendation_type')},
            },
        ),
    ]
